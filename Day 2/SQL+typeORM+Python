1. SQL Query Examples
Basic Select Query

SELECT * FROM users WHERE status = 'active';

Insert Query

INSERT INTO users (name, email, status) VALUES ('John Doe', 'john.doe@example.com', 'active');

Update Query

UPDATE users SET status = 'inactive' WHERE id = 1;

Delete Query

DELETE FROM users WHERE id = 1;

Join Query

SELECT u.name, o.order_date
FROM users u
JOIN orders o ON u.id = o.user_id
WHERE u.status = 'active';

2. TypeORM (Node.js)
Select Query with TypeORM

import { getRepository } from 'typeorm';
import { User } from './entity/User';

const users = await getRepository(User).find({ where: { status: 'active' } });
console.log(users);

Insert Query with TypeORM

import { getRepository } from 'typeorm';
import { User } from './entity/User';

const user = new User();
user.name = 'John Doe';
user.email = 'john.doe@example.com';
user.status = 'active';

await getRepository(User).save(user);

Update Query with TypeORM

import { getRepository } from 'typeorm';
import { User } from './entity/User';

const user = await getRepository(User).findOne({ where: { id: 1 } });
if (user) {
  user.status = 'inactive';
  await getRepository(User).save(user);
}

Delete Query with TypeORM

import { getRepository } from 'typeorm';
import { User } from './entity/User';

await getRepository(User).delete({ id: 1 });

3. Python (SQLAlchemy)
Select Query with SQLAlchemy

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from models import User

engine = create_engine('sqlite:///example.db')
Session = sessionmaker(bind=engine)
session = Session()

users = session.query(User).filter_by(status='active').all()
for user in users:
    print(user.name)

Insert Query with SQLAlchemy

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from models import User

engine = create_engine('sqlite:///example.db')
Session = sessionmaker(bind=engine)
session = Session()

new_user = User(name='John Doe', email='john.doe@example.com', status='active')
session.add(new_user)
session.commit()

Update Query with SQLAlchemy

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from models import User

engine = create_engine('sqlite:///example.db')
Session = sessionmaker(bind=engine)
session = Session()

user = session.query(User).filter_by(id=1).first()
if user:
    user.status = 'inactive'
    session.commit()

Delete Query with SQLAlchemy

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from models import User

engine = create_engine('sqlite:///example.db')
Session = sessionmaker(bind=engine)
session = Session()

user = session.query(User).filter_by(id=1).first()
if user:
    session.delete(user)
    session.commit()

Join Query with SQLAlchemy

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from models import User, Order

engine = create_engine('sqlite:///example.db')
Session = sessionmaker(bind=engine)
session = Session()

results = session.query(User.name, Order.order_date).join(Order, User.id == Order.user_id).filter(User.status == 'active').all()

for result in results:
    print(f'Name: {result[0]}, Order Date: {result[1]}')

4. Python with SQLite3 (Direct SQL Queries)
Select Query with SQLite3

import sqlite3

conn = sqlite3.connect('example.db')
cursor = conn.cursor()

cursor.execute("SELECT * FROM users WHERE status = 'active'")
users = cursor.fetchall()

for user in users:
    print(user)

conn.close()

Insert Query with SQLite3

import sqlite3

conn = sqlite3.connect('example.db')
cursor = conn.cursor()

cursor.execute("INSERT INTO users (name, email, status) VALUES ('John Doe', 'john.doe@example.com', 'active')")
conn.commit()

conn.close()

Update Query with SQLite3

import sqlite3

conn = sqlite3.connect('example.db')
cursor = conn.cursor()

cursor.execute("UPDATE users SET status = 'inactive' WHERE id = 1")
conn.commit()

conn.close()

Delete Query with SQLite3

import sqlite3

conn = sqlite3.connect('example.db')
cursor = conn.cursor()

cursor.execute("DELETE FROM users WHERE id = 1")
conn.commit()

conn.close()

